// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	io "io"

	csvparser "github.com/winning-number/fdjapi-lotto/csvparser"

	lotto "github.com/winning-number/fdjapi-lotto"

	mock "github.com/stretchr/testify/mock"
)

// Lotto is an autogenerated mock type for the Lotto type
type Lotto struct {
	mock.Mock
}

// DrawCount provides a mock function with given fields: filter
func (_m *Lotto) DrawCount(filter lotto.Filter) int {
	ret := _m.Called(filter)

	var r0 int
	if rf, ok := ret.Get(0).(func(lotto.Filter) int); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Draws provides a mock function with given fields: filter, order
func (_m *Lotto) Draws(filter lotto.Filter, order bool) []lotto.Draw {
	ret := _m.Called(filter, order)

	var r0 []lotto.Draw
	if rf, ok := ret.Get(0).(func(lotto.Filter, bool) []lotto.Draw); ok {
		r0 = rf(filter, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lotto.Draw)
		}
	}

	return r0
}

// LoadAPI provides a mock function with given fields: option
func (_m *Lotto) LoadAPI(option lotto.LoadAPIOption) error {
	ret := _m.Called(option)

	var r0 error
	if rf, ok := ret.Get(0).(func(lotto.LoadAPIOption) error); ok {
		r0 = rf(option)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadCSV provides a mock function with given fields: r, drawType, drawVersion
func (_m *Lotto) LoadCSV(r io.Reader, drawType lotto.DrawType, drawVersion lotto.DrawVersion) (csvparser.Warning, error) {
	ret := _m.Called(r, drawType, drawVersion)

	var r0 csvparser.Warning
	if rf, ok := ret.Get(0).(func(io.Reader, lotto.DrawType, lotto.DrawVersion) csvparser.Warning); ok {
		r0 = rf(r, drawType, drawVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(csvparser.Warning)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader, lotto.DrawType, lotto.DrawVersion) error); ok {
		r1 = rf(r, drawType, drawVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLotto interface {
	mock.TestingT
	Cleanup(func())
}

// NewLotto creates a new instance of Lotto. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLotto(t mockConstructorTestingTNewLotto) *Lotto {
	mock := &Lotto{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
